using RimWorld;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using Verse;
using static CyanobotsLeather.Main;

namespace CyanobotsLeather
{
    public static class WoolUtility
    {
        public static bool IsValidWool(ThingDef def)
        {
            //LogUtil.DebugLog("IsValidWool - " + def);
            if (def == null) return false;

            //anything blacklisted is not valid
            if (CyanobotsLeather_DefOf.CYB_WoolInclusion.blacklist.Contains(def)) return false;

            //if it's whitelisted, it's definitely a wool
            if (CyanobotsLeather_DefOf.CYB_WoolInclusion.whitelist.Contains(def)) return true;

            //if it was generated by Better Wool Production, it's a wool
            if (betterWoolLoaded && def.defName.StartsWith("BWP_")) return true;

            //if it's not an Item with stuffProps, it's probably not a wool
            //LogUtil.DebugLog("def.category: " + def.category
            //    + ", stuffProps: " + def.stuffProps);
            if (def.category != ThingCategory.Item) return false;
            if (def.stuffProps == null) return false;

            //otherwise it's probably a wool
            return true;
        }

        public static ThingDef WoolDefFor(ThingDef animalDef)
        {
            ThingDef woolDef = null;

            CompProperties_Shearable props_Shearable = animalDef.GetCompProperties<CompProperties_Shearable>();
            //LogUtil.DebugLog("WoolDefFor -  animalDef: " + animalDef
            //    + ", props_Shearable: " + props_Shearable
            //    + ", props.woolDef: " + props_Shearable?.woolDef);
            
            if (props_Shearable != null) woolDef = props_Shearable.woolDef;

            if (woolDef == null && VEFLoaded && !animalDef.comps.NullOrEmpty())
            {
                CompProperties props_AnimalProduct = animalDef.comps.Find(p => p.GetType() == t_CompProperties_AnimalProduct);
                if (props_AnimalProduct == null) return null;

                //LogUtil.DebugLog("WoolDefFor -  animalDef: " + animalDef
                //    + ", VEFLoaded, props_AnimalProduct: " + props_AnimalProduct);

                //chameleon yak is handled separately
                if (AALoaded && animalDef.defName == "AA_ChameleonYak") return null;

                else
                {
                    woolDef = f_resourceDef.GetValue(props_AnimalProduct) as ThingDef;
                }
            }

            if (IsValidWool(woolDef)) return woolDef;
            else return null;
        }

        public static float TotalWoolAmountFor(ThingDef animalDef)
        {
            float woolAmount = 0f;
            CompProperties_Shearable props_Shearable = animalDef.GetCompProperties<CompProperties_Shearable>();
            if (props_Shearable != null)
            {
                woolAmount = props_Shearable.woolAmount;
            }
            else if (VEFLoaded && !animalDef.comps.NullOrEmpty())
            {
                CompProperties props_AnimalProduct = animalDef.comps.Find(p => p.GetType() == t_CompProperties_AnimalProduct);
                if (props_AnimalProduct != null)
                {
                    var resourceAmount = f_resourceAmount.GetValue(props_AnimalProduct);
                    woolAmount = resourceAmount == null ? 0f : (int)resourceAmount;
                }
            }
            return woolAmount;
        }

        public static float CurrentWoolFullness(Pawn animal, ThingDef woolDef)
        {
            LogUtil.DebugLog("CurrentWoolFullness - animal: " + animal
                + ", woolDef: " + woolDef);
            bool foundComp = false;
            float fullness = 0f;
            CompShearable compShearable = animal.GetComp<CompShearable>();
            if (compShearable != null && compShearable.Props.woolDef == woolDef)
            {
                foundComp = true;
                fullness = compShearable.Fullness;
                LogUtil.DebugLog("found CompShearable, fullness: " + fullness);
            }
            else if (VEFLoaded && !animal.AllComps.NullOrEmpty())
            {
                ThingComp comp_AnimalProduct = animal.AllComps.Find(c => c.GetType() == t_CompAnimalProduct);
                if (comp_AnimalProduct != null)
                {
                    ThingDef animalProductDef = f_resourceDef.GetValue(comp_AnimalProduct.props) as ThingDef;
                    if (animalProductDef == woolDef)
                    {
                        foundComp = true;
                        fullness = (float)f_fullness.GetValue(comp_AnimalProduct);
                        LogUtil.DebugLog("found CompAnimalProduct, fullness: " + fullness);
                    }
                }
            }
            if (!foundComp) return 0f;

            if (!animal.ageTracker.CurLifeStage.shearable)
            {
                LogUtil.DebugLog("animal too young to shear, returning 0");
                fullness = 0f;
            }
            else if (animal.Faction == null)
            {
                LogUtil.DebugLog("animal without faction, returning 0.7");
                fullness = 0.7f;
            }

            return fullness;
        }

        public static float WoolAmountPerLeatherFor(ThingDef animalDef)
        {
            float leatherAmount = animalDef.statBases.GetStatValueFromList(StatDefOf.LeatherAmount, 0f);
            if (leatherAmount == 0) return 0f;

            float woolAmount = TotalWoolAmountFor(animalDef);
            return woolAmount / leatherAmount;
        }


    }
}
